vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
swirl()
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
matrix(1:20,4,5)
my_matrix2 <- matrix(data=1:20, nrow=4, ncol=5)
identical(my_matrix, my_matrix2)
patients <- ("Bill", "Gina", "Kelly", "Sean")
patients <- ("Bill" "Gina" "Kelly" "Sean")
patients <- ("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(my_matrix, patients)
cbind(patients,my_matrix )
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data, colnames= cnames)
?colnames
colnames(my_data, cnames)
colnames(my_data) <- cnames
my_data
pwd()
getwd()
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
r <- makeVector(1:10)
r.get()
r$get()
r$set(5:50)
r$get()
makeCacheMatrix <- function(cachedX = matrix()) {
# Create a blank so we are always working against something
myInverse <- NULL
# set/ initialize
set <- function(y){
cachedX <<- y
myInverse <<- NULL
}
get function() x
setInverse <- function(inverse) myInverse <<- inverse
getInverse <- function() myInverse
#? not sure about this
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeCacheMatrix <- function(cachedX = matrix()) {
# Create a blank so we are always working against something
myInverse <- NULL
# set/ initialize
set <- function(y){
cachedX <<- y
myInverse <<- NULL
}
get function() x
setInverse <- function(inverse) myInverse <<- inverse
getInverse <- function() myInverse
#? not sure about this
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeCacheMatrix <- function(cachedX = matrix()) {
# Create a blank so we are always working against something
myInverse <- NULL
# set/ initialize
set <- function(y){
cachedX <<- y
myInverse <<- NULL
}
get <- function() x
setInverse <- function(inverse) myInverse <<- inverse
getInverse <- function() myInverse
#? not sure about this
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
someMatrix < makeCacheMatrix
someMatrix <- makeCacheMatrix
someMatrix$set(vector(1:9,3,3))
aVec <- vector(1:9,3,3)
aVec <- vector(1:9,3,)
>vector
?vector
aMatrix <- Matrix(1:9,3,3)
aMatrix <- matrix(1:9,3,3)
aMatrix
bMatrix <- matrix(1:4,2,2)
bMatrix
someMatrix$set(aMatrix)
someMatrix <- makeCacheMatrix(bMatrix)
makeCacheMatrix <- function(cachedX = matrix()) {
# Create a blank so we are always working against something
myInverse <- NULL
# set/ initialize
set <- function(y){
cachedX <<- y
myInverse <<- NULL
}
get <- function() x
setInverse <- function(inverse) myInverse <<- inverse
getInverse <- function() myInverse
#? not sure about this
#list(set = set, get = get,
#     setmean = setmean,
#     getmean = getmean)
}
someMatrix <- makeCacheMatrix(bMatrix)
someMatrix
someMatrix$get
makeCacheMatrix <- function(cachedX = matrix()) {
# Create a blank so we are always working against something
myInverse <- NULL
# set/ initialize
set <- function(y){
cachedX <<- y
myInverse <<- NULL
}
get <- function() cachedX
setInverse <- function(inverse) myInverse <<- inverse
getInverse <- function() myInverse
#? not sure about this
#list(set = set, get = get,
#     setmean = setmean,
#     getmean = getmean)
}
someMatrix$get
someMatrix <- makeCacheMatrix(bMatrix)
someMatrix$get
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Solve for the inverse of x in ix
invX <- x$getInverse()
## check for null (set called, or never calculate)
if(!is.null(invX)){
message("Using the Cached Data")
return(invX)
}
# technically ELSE
message("Calculating the new solve/inverse; setting for X and returning")
datum <- x$get()
invX < solve(datum, ...)
x.setInverse(invX)
return(invX)
}
cacheSolve(someMatrix)
cacheSolve(someMatrix)
someMatrix$get()
someMatrix$get
someMatrix$get()
someMatrix
someMatrix$
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Solve for the inverse of x in ix
invX <- x$getInverse()
## check for null (set called, or never calculate)
if(!is.null(invX)){
message("Using the Cached Data")
return(invX)
}
# technically ELSE
message("Calculating the new solve/inverse; setting for X and returning")
datum <- x$get()
invX < solve(datum, ...)
x$setInverse(invX)
return(invX)
}
cacheSolve(someMatrix)
makeCacheMatrix <- function(cachedX = matrix()) {
# Create a blank so we are always working against something
myInverse <- NULL
# set/ initialize
set <- function(y){
cachedX <<- y
myInverse <<- NULL
}
get <- function() x
setInverse <- function(inverse) myInverse <<- inverse
getInverse <- function() myInverse
#? not sure about this
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
someMatrix <- makeCacheMatrix(bMatrix)
cacheSolve(someMatrix)
aMatrix
bMatrix
makeCacheMatrix <- function(cachedX = matrix()) {
# Create a blank so we are always working against something
myInverse <- NULL
# set/ initialize
set <- function(y){
cachedX <<- y
myInverse <<- NULL
}
get <- function() cachedX
setInverse <- function(inverse) myInverse <<- inverse
getInverse <- function() myInverse
#? not sure about this
list(set = set, get = get,
setInverse = setInverse,
getInverse = getInverse)
}
someMatrix <- makeCacheMatrix(bMatrix)
cacheSolve(someMatrix)
solve(bMatrix)
someMatrix$getInverse
someMatrix$getInverse()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Solve for the inverse of x in ix
invX <- x$getInverse()
## check for null (set called, or never calculate)
if(!is.null(invX)){
message("Using the Cached Data")
return(invX)
}
# technically ELSE
message("Calculating the new solve/inverse; setting for X and returning")
datum <- x$get()
print datum
invX < solve(datum)
print invX
x$setInverse(invX)
return(invX)
}
solve(bMatrix)
bMatrix
someMatrix$setInverse(solve(bMatrix))
someMatrix$getInvers()
cacheSolve(someMatrix)
garb <- makeCachedMatrix(aMatrix)
garb <- makeCacheMatrix(aMatrix)
garb$getInverse()
cacheSolve(garb)
solve(garb$get())
garb$get()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Solve for the inverse of x in ix
invX <- x$getInverse()
solv
## check for null (set called, or never calculate)
if(!is.null(invX)){
message("Using the Cached Data")
return(invX)
}
# technically ELSE
message("Calculating the new solve/inverse; setting for X and returning")
datum <- x$get()
print datum
print "I printed datum"
invX < solve(datum)
print invX
print "I printed INVx"
x$setInverse(invX)
return(invX)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Solve for the inverse of x in ix
invX <- x$getInverse()
solv
## check for null (set called, or never calculate)
if(!is.null(invX)){
message("Using the Cached Data")
return(invX)
}
# technically ELSE
message("Calculating the new solve/inverse; setting for X and returning")
datum <- x$get()
print( datum)
print( "I printed datum")
invX < solve(datum)
print( invX)
print( "I printed INVx")
x$setInverse(invX)
invX  #I wanted to return(invX) but the system seemed to complain
}
solve(garb$get())
garb$get()
class(garb$get())
cacheSolve(garb)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Solve for the inverse of x in ix
invX <- x$getInverse()
## check for null (set called, or never calculate)
if(!is.null(invX)){
message("Using the Cached Data")
return(invX)
}
# technically ELSE
message("Calculating the new solve/inverse; setting for X and returning")
datum <- x$get()
print( datum)
print( "I printed datum")
invX < solve(datum)
print( invX)
print( "I printed INVx")
x$setInverse(invX)
invX  #I wanted to return(invX) but the system seemed to complain
}
cacheSolve(garb)
aMatric
aMatrix
bMatrix
solve(bMatrix)
garb$get()
cacheSolve(garb)
garb$get()
identical(aMatrix, garb$get())
solve(aMatrix)
aMatrix
garb <- makeCacheMatrix(bMatrix)
garb$get()
cacheSolve(garb)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Solve for the inverse of x in ix
invX <- x$getInverse()
## check for null (set called, or never calculate)
if(!is.null(invX)){
message("Using the Cached Data")
return(invX)
}
# technically ELSE
message("Calculating the new solve/inverse; setting for X and returning")
datum <- x$get()
invX < solve(datum)
x$setInverse(invX)
invX  #I wanted to return(invX) but the system seemed to complain
}
cacheSolve(garb)
garb$setInverse(solve(bMatrix))
garb$getInverse()
garb$set(bMatrix)
garb$getInverse()
cacheSolve(garb)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Solve for the inverse of x in ix
invX <- x$getInverse()
## check for null (set called, or never calculate)
if(!is.null(invX)){
message("Using the Cached Data")
return(invX)
}
# technically ELSE
message("Calculating the new solve/inverse; setting for X and returning")
datum <- x$get()
print(datum)
invX < solve(datum)
print(invX)
x$setInverse(invX)
invX  #I wanted to return(invX) but the system seemed to complain
}
cacheSolve(garb)
garb$get()
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Solve for the inverse of x in ix
invX <- x$getInverse()
## check for null (set called, or never calculate)
if(!is.null(invX)){
message("Using the Cached Data")
return(invX)
}
# technically ELSE
message("Calculating the new solve/inverse; setting for X and returning")
datum <- x$get()
print("1")
print(datum)
print("2")
print(x$get())
invX < solve(datum)
print(invX)
x$setInverse(invX)
invX  #I wanted to return(invX) but the system seemed to complain
}
cacheSolve(garb)
solve(bMatrix)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Solve for the inverse of x in ix
invX <- x$getInverse()
## check for null (set called, or never calculate)
if(!is.null(invX)){
message("Using the Cached Data")
return(invX)
}
# technically ELSE
message("Calculating the new solve/inverse; setting for X and returning")
invX < solve(x$get())
print(invX)
x$setInverse(invX)
invX  #I wanted to return(invX) but the system seemed to complain
}
solve(bMatrix)
cacheSolve(garb)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
## Solve for the inverse of x in ix
invX <- x$getInverse()
## check for null (set called, or never calculate)
if(!is.null(invX)){
message("Using the Cached Data")
return(invX)
}
# technically ELSE
message("Calculating the new solve/inverse; setting for X and returning")
invX <- solve(x$get())
print(invX)
x$setInverse(invX)
invX  #I wanted to return(invX) but the system seemed to complain
}
cacheSolve(garb)
garb$getInverse()
install.package("knitr")
package.install("knitr")
install.packages("knitr")
install.packages("manipulate")
myCountNA <- function(myDataFrameVector){
tryCatch(
cntr = 0
stepsIter <- iter(myDataFrameVector, by="row")
while(1==1) {
nxtRow <- nextElem(stepsIter)
if ( is.na(nxtRow$steps) ) {
cntr = cntr + 1
}
},
error = function(e){return cntr}
)
} # Ends the function definitions
myCountNA <- function(myDataFrameVector){
tryCatch(
cntr = 0
stepsIter <- iter(myDataFrameVector, by="row")
while(1==1) {
nxtRow <- nextElem(stepsIter)
if ( is.na(nxtRow$steps) ) {
cntr = cntr + 1
}
return(cntr)
},
error = function(e){return(cntr)}
)
} # Ends the function definitions
fitbit <- read.csv("data1/activity.csv")
install.packages(c("KernSmooth", "manipulate", "rmarkdown"))
setwd("C:/Users/Gary/Downloads/coursera/reproduce/peer1reproduceA")
fitbit <- read.csv("data1/activity.csv")
unique(fitbit$dates)
unique(fitbit$date)
myUniqueDates = unique(fitbit$date)
subset(fitbit, fitbit$date = '2012-10-01')
subset(fitbit, fitbit$date='2012-10-01')
subset(fitbit, date='2012-10-01')
subset(fitbit, fitbit$date="2012-10-01")
subset(fitbit, fitbit$date=="2012-10-01")
mean(subset(fitbit, fitbit$date=="2012-10-01"))
mean(subset(fitbit, fitbit$date=="2012-10-10"))
mean(subset(fitbit, fitbit$date=="2012-10-10"))
subset(fitbit, fitbit$date=="2012-10-10")
subset(fitbit, fitbit$date=="2012-10-10")$steps
mean(subset(fitbit, fitbit$date=="2012-10-10")$steps)
median(subset(fitbit, fitbit$date=="2012-10-10")$steps)
require(sqldf)
require(iterators)
